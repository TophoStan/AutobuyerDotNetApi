// <auto-generated />
using System;
using System.Collections.Generic;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AutoBuyDbContext))]
    [Migration("20250921083350_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Contracts.BrandEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MinimumFreeDeliveryPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4542dfea-86e4-4fce-9446-c1b840fbefa0"),
                            BaseUrl = "https://www.upfront.nl/",
                            LogoUrl = "https://upfront.nl/cdn/shop/files/LOGO-INVOICE.svg?v=1687087217&width=80",
                            MinimumFreeDeliveryPrice = 49.0,
                            Name = "Upfront"
                        });
                });

            modelBuilder.Entity("Data.Contracts.OptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductEntityId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Values")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("options");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4e5f6a7-b8c9-0123-def4-56789012345a"),
                            Name = "Whey_flavour",
                            ProductEntityId = new Guid("393d1534-3f8e-4b47-bdae-ed974c609982"),
                            Values = new List<string> { "Banaan", "Vanille", "Speculaas", "Chocolade", "Aardbei", "Framboos" }
                        });
                });

            modelBuilder.Entity("Data.Contracts.OrderStepEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ProductEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("StepInJs")
                        .HasColumnType("text");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("order_steps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            ProductEntityId = new Guid("393d1534-3f8e-4b47-bdae-ed974c609982"),
                            StepInJs = "await page.click('xo-toggle-trigger[xo-name=\"variant-flavour-toggle-main-product\"]')",
                            StepName = "Open smaken"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            ProductEntityId = new Guid("393d1534-3f8e-4b47-bdae-ed974c609982"),
                            StepInJs = "await page\n            .locator('div.variant-flavour-selector__popover-inner')\n            .locator('span')\n            .filter({ hasText: 'Vanille' })\n            .first()\n            .click();",
                            StepName = "Klik op smaak"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            ProductEntityId = new Guid("393d1534-3f8e-4b47-bdae-ed974c609982"),
                            StepInJs = "await page.getByText('Voeg toe').first().click();",
                            StepName = "Voeg toe aan mandje"
                        });
                });

            modelBuilder.Entity("Data.Contracts.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("BrandEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandEntityId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("393d1534-3f8e-4b47-bdae-ed974c609982"),
                            BrandEntityId = new Guid("4542dfea-86e4-4fce-9446-c1b840fbefa0"),
                            Description = "Proteine enzo",
                            Name = "Why protein",
                            Price = 24m,
                            Url = "https://upfront.nl/products/whey"
                        });
                });

            modelBuilder.Entity("Data.Contracts.OptionEntity", b =>
                {
                    b.HasOne("Data.Contracts.ProductEntity", "ProductEntity")
                        .WithMany("Options")
                        .HasForeignKey("ProductEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductEntity");
                });

            modelBuilder.Entity("Data.Contracts.OrderStepEntity", b =>
                {
                    b.HasOne("Data.Contracts.ProductEntity", "ProductEntity")
                        .WithMany("OrderSteps")
                        .HasForeignKey("ProductEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductEntity");
                });

            modelBuilder.Entity("Data.Contracts.ProductEntity", b =>
                {
                    b.HasOne("Data.Contracts.BrandEntity", "BrandEntity")
                        .WithMany("Products")
                        .HasForeignKey("BrandEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrandEntity");
                });

            modelBuilder.Entity("Data.Contracts.BrandEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Contracts.ProductEntity", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("OrderSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
